generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(cuid())
  name     String
  email    String @unique()
  username String @unique()

  emoji String @default("üêµ")

  userInviteLinkId String         @unique() @map("userInviteSlugId")
  userInviteLink   UserInviteLink @relation(fields: [userInviteLinkId], references: [id])

  fullAccessPurchaseId String?             @unique()
  fullAccessPurchase   FullAccessPurchase? @relation(fields: [fullAccessPurchaseId], references: [id])

  createdAt                   DateTime            @default(now())
  connectionFirstUser         Connection[]        @relation("connection_first_user")
  connectionSecondUser        Connection[]        @relation("connection_second_user")
  connectionRequestFirstUser  ConnectionRequest[] @relation("connection_request_first_user")
  connectionRequestSecondUser ConnectionRequest[] @relation("connection_request_second_user")
  SharedPremium               SharedPremium[]
}

model UserInviteLink {
  id String @id @default(cuid())

  slug String @unique()

  createdAt DateTime @default(now())
  User      User?
}

model FullAccessPurchase {
  id String @id @default(cuid())

  createdAt     DateTime        @default(now())
  User          User?
  SharedPremium SharedPremium[]
}

model SharedPremium {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  userId    String?
  User      User?    @relation(fields: [userId], references: [id])

  purchaseId String?
  purchase   FullAccessPurchase? @relation(fields: [purchaseId], references: [id])
}

model ConnectionRequest {
  id String @id @default(cuid())

  firstUserId  String
  secondUserId String
  rejected     Boolean @default(false)

  firstUser  User @relation("connection_request_first_user", fields: [firstUserId], references: [id])
  secondUser User @relation("connection_request_second_user", fields: [secondUserId], references: [id])

  createdAt DateTime @default(now())

  @@unique([firstUserId, secondUserId])
}

model Connection {
  id String @id @default(cuid())

  firstUserId  String
  secondUserId String
  firstUser    User   @relation("connection_first_user", fields: [firstUserId], references: [id])
  secondUser   User   @relation("connection_second_user", fields: [secondUserId], references: [id])

  @@unique([firstUserId, secondUserId])
  @@map("Friend")
}
