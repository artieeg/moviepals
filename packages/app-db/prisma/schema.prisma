generator kysely {
  provider = "prisma-kysely"

  // Optionally provide a destination directory for the generated file
  // and a filename of your choice
  output   = "../src/db"
  fileName = "types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(cuid())
  name           String
  email          String  @unique()
  sub            String  @unique()
  username       String  @unique()
  timezoneOffset Int     @default(0)
  fcmToken       String?

  allowPushNotifications Boolean @default(true)
  joinedMailingList      Boolean @default(false)
  emoji                  String  @default("üêµ")

  inviteApplied Boolean @default(false)

  userInviteLinkId String         @unique() @map("userInviteSlugId")
  userInviteLink   UserInviteLink @relation(fields: [userInviteLinkId], references: [slug])

  fullAccessPurchaseId String?             @unique()
  fullAccessPurchase   FullAccessPurchase? @relation(fields: [fullAccessPurchaseId], references: [id])

  createdAt                   DateTime            @default(now())
  connectionFirstUser         Connection[]        @relation("connection_first_user")
  connectionSecondUser        Connection[]        @relation("connection_second_user")
  connectionRequestFirstUser  ConnectionRequest[] @relation("connection_request_first_user")
  connectionRequestSecondUser ConnectionRequest[] @relation("connection_request_second_user")
  SharedPremium               SharedPremium[]
}

model UserInviteLink {
  slug String @id() @unique()

  createdAt DateTime @default(now())
  User      User?
}

model FullAccessPurchase {
  id String @id @default(cuid())

  //RevenueCat or Gift
  source String

  createdAt     DateTime        @default(now())
  User          User?
  SharedPremium SharedPremium[]
}

model SharedPremium {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  userId    String?  @unique()
  User      User?    @relation(fields: [userId], references: [id])

  purchaseId String?
  purchase   FullAccessPurchase? @relation(fields: [purchaseId], references: [id])

  @@index([userId])
  @@index([userId, purchaseId])
}

model ConnectionRequest {
  id String @id @default(cuid())

  firstUserId  String
  secondUserId String
  rejected     Boolean @default(false)

  firstUser  User @relation("connection_request_first_user", fields: [firstUserId], references: [id])
  secondUser User @relation("connection_request_second_user", fields: [secondUserId], references: [id])

  createdAt DateTime @default(now())

  @@unique([firstUserId, secondUserId])
  @@index([firstUserId])
  @@index([secondUserId])
}

model Connection {
  id String @id @default(cuid())

  firstUserId  String
  secondUserId String
  firstUser    User   @relation("connection_first_user", fields: [firstUserId], references: [id])
  secondUser   User   @relation("connection_second_user", fields: [secondUserId], references: [id])

  @@unique([firstUserId, secondUserId])
  @@index([firstUserId])
  @@index([secondUserId])
  @@map("Friend")
}
